{"version":3,"sources":["Components/InfiniteScroll/InfiniteScroll.js","App.js","index.js"],"names":["InfiniteScroll","useState","dataImg","setDataImg","pageIndex","setPageIndex","searchState","setSearchState","firstCall","setFirstCall","console","log","useEffect","fetch","then","response","json","data","imgsReceived","results","forEach","img","push","urls","regular","newFreshState","index","i","j","searchFetchData","inpRef","useRef","infiniteCheck","document","documentElement","scrollTop","scrollHeight","clientHeight","Math","abs","window","addEventListener","removeEventListener","className","onSubmit","e","preventDefault","current","value","htmlFor","type","id","ref","map","src","alt","uuidv4","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"6PAIe,SAASA,IAGtB,MAA+BC,mBAAS,CAAC,GAAG,GAAG,KAAI,mBAA5CC,EAAO,KAAGC,EAAU,KAG3B,EAAmCF,mBAAS,GAAE,mBAAvCG,EAAS,KAAGC,EAAY,KAG/B,EAAuCJ,mBAAS,UAAS,mBAAlDK,EAAW,KAAGC,EAAc,KAGnC,EAAmCN,oBAAS,GAAK,mBAA1CO,EAAS,KAAGC,EAAY,KAyC/BC,QAAQC,IAAIT,GAEZU,qBAAU,WAtCRC,MAAM,+CAAD,OAAgDT,EAAS,8BAAsBE,EAAW,2DAA0DQ,MAAK,SAACC,GAC7J,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLP,QAAQC,IAAIM,GACZ,IAAMC,EAAe,GAGrBD,EAAKE,QAAQC,SAAQ,SAAAC,GACnBH,EAAaI,KAAKD,EAAIE,KAAKC,YAY7B,IARA,IAAMC,EAAgB,CAAC,YACjBvB,EAAQ,IAAE,YACVA,EAAQ,IAAE,YACVA,EAAQ,KAGVwB,EAAQ,EAEJC,EAAE,EAAGA,EAAE,EAAGA,IAChB,IAAI,IAAIC,EAAE,EAAGA,EAAE,GAAIA,IACjBH,EAAcE,GAAGL,KAAKJ,EAAaQ,IACnCA,IAKJvB,EAAWsB,GAGXhB,GAAa,QAQf,CAACL,IAYHQ,qBAAU,WAELJ,GACHqB,MACA,CAACvB,IAGH,IAAMuB,EAAiB,WACrBhB,MAAM,+CAAD,OAAgDT,EAAS,8BAAsBE,EAAW,2DAA0DQ,MAAK,SAACC,GAC7J,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLP,QAAQC,IAAIM,GACZ,IAAMC,EAAe,GAGrBD,EAAKE,QAAQC,SAAQ,SAAAC,GACnBH,EAAaI,KAAKD,EAAIE,KAAKC,YAY7B,IARA,IAAMC,EAAgB,CACpB,GACA,GACA,IAGEC,EAAQ,EAEJC,EAAE,EAAGA,EAAE,EAAGA,IAChB,IAAI,IAAIC,EAAE,EAAGA,EAAE,GAAIA,IACjBH,EAAcE,GAAGL,KAAKJ,EAAaQ,IACnCA,IAKJvB,EAAWsB,OAITK,EAASC,mBAQTC,EAAe,WACnBtB,QAAQC,IAAI,uBACZ,MAAgDsB,SAASC,gBAAlDC,EAAS,EAATA,UAAWC,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAE7BC,KAAKC,IAAIH,EAAeC,EAAeF,GAAa,IACrDzB,QAAQC,IAAI,4BACZN,GAAa,SAAAD,GAAS,OAAIA,EAAU,OAiBxC,OAVAQ,qBAAU,WAKR,OAHA4B,OAAOC,iBAAiB,SAAUT,GAG3B,WACLQ,OAAOE,oBAAoB,SAASV,MAEtC,IAGA,sBAAKW,UAAU,YAAW,UAExB,uBAAMC,SApFW,SAACC,GACpBA,EAAEC,iBAGFvC,EAAeuB,EAAOiB,QAAQC,OAG9B3C,EAAa,IA6EkB,UAC3B,uBAAO4C,QAAQ,SAAQ,SAAC,oBACxB,uBAAOC,KAAK,OAAOC,GAAG,SAAUC,IAAKtB,OAGvC,sBAAKa,UAAU,YAAW,UACxB,8BACGzC,EAAQ,GAAGmD,KAAI,SAAAhC,GACd,OAAO,qBAAoBiC,IAAKjC,EAAKkC,IAAI,IAAxBC,oBAIrB,8BACGtD,EAAQ,GAAGmD,KAAI,SAAAhC,GACd,OAAO,qBAAoBiC,IAAKjC,EAAKkC,IAAI,IAAxBC,oBAIrB,8BACGtD,EAAQ,GAAGmD,KAAI,SAAAhC,GACd,OAAO,qBAAoBiC,IAAKjC,EAAKkC,IAAI,IAAxBC,0BC7JdC,MARf,WACE,OACE,8BACE,cAAC,EAAc,OCDrBC,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAEN3B,SAAS4B,eAAe,W","file":"static/js/main.29ba1203.chunk.js","sourcesContent":["import React,{useState , useEffect , useRef } from 'react'\r\nimport \"./InfiniteScroll.css\"\r\nimport {v4  as uuidv4} from \"uuid\"\r\n\r\nexport default function InfiniteScroll() {\r\n\r\n  // state qui stock les données en 3 collones d'images\r\n  const [dataImg , setDataImg] = useState([[],[],[]])\r\n\r\n  // generer des pages à l'infini\r\n  const [pageIndex , setPageIndex] = useState(1)\r\n\r\n  // chercher et generer des img : etat initial aleatoire\r\n  const [searchState , setSearchState] = useState(\"random\")\r\n\r\n  // en fonction de son etat le useEffect de recherche s'excecutera ou non\r\n  const [firstCall , setFirstCall] = useState(true)\r\n\r\n\r\n\r\n  const infiniteFetchData =() =>{\r\n    fetch(`https://api.unsplash.com/search/photos?page=${pageIndex}&per_page=30&query=${searchState}&client_id=YM-c-fclit9UkTTgUdqSA5K66UKtoqoTuWJ8JmfNL3Q`).then((response)=>{\r\n      return response.json()\r\n    })\r\n    .then((data)=>{\r\n      console.log(data)\r\n      const imgsReceived = []\r\n\r\n      // pusser les url dans le tableau imgsReceived\r\n      data.results.forEach(img => {\r\n        imgsReceived.push(img.urls.regular)\r\n      });\r\n\r\n      // creer des nouveaux tableaux avec comme contenu les données des anciens tableaux\r\n      const newFreshState = [\r\n        [...dataImg[0]],\r\n        [...dataImg[1]],\r\n        [...dataImg[2]],\r\n      ]\r\n\r\n      let index = 0 \r\n      // creation de boucle dans une boucle pour inserer les données dans les sous tableaux\r\n      for(let i=0; i<3; i++){\r\n        for(let j=0; j<10; j++){\r\n          newFreshState[i].push(imgsReceived[index])\r\n          index++\r\n        }\r\n      }\r\n\r\n      // mise a jour de letat avec les nouveux tableaux\r\n      setDataImg(newFreshState)\r\n\r\n      // on met firstCall a false a la fin de l'appel des données\r\n      setFirstCall(false)\r\n    })\r\n    \r\n  }\r\n  console.log(dataImg)\r\n  \r\n  useEffect(()=>{\r\n    infiniteFetchData()\r\n  },[pageIndex])\r\n\r\n  // Au submit de linput moteur de recherche\r\n  const handleSearch = (e) => {\r\n    e.preventDefault()\r\n\r\n    // change letat de searchState qui nest plus a 0\r\n    setSearchState(inpRef.current.value)\r\n\r\n    // remettre l'index à 1 au submit de linput\r\n    setPageIndex(1)\r\n  }\r\n  useEffect(()=>{\r\n    // pour ne pas que ce useEffect se lance au premier affichage du composant (perd en performance) : je dis :  firstCall === true => je return => cad , je sors du composant sinon j'excecute le composant : on mettra au debut le firstCall a true et puis a la fin de infiniteFetchData() je le met à false\r\n    if(firstCall){return;}\r\n    searchFetchData()\r\n  },[searchState])\r\n\r\n  // fetcher des images avec lutilisation du moteur de recherche\r\n  const searchFetchData =() =>{\r\n    fetch(`https://api.unsplash.com/search/photos?page=${pageIndex}&per_page=30&query=${searchState}&client_id=YM-c-fclit9UkTTgUdqSA5K66UKtoqoTuWJ8JmfNL3Q`).then((response)=>{\r\n      return response.json()\r\n    })\r\n    .then((data)=>{\r\n      console.log(data)\r\n      const imgsReceived = []\r\n\r\n      // pusser les url dans le tableau imgsReceived\r\n      data.results.forEach(img => {\r\n        imgsReceived.push(img.urls.regular)\r\n      });\r\n\r\n      // creer des nouveaux tableaux avec comme contenu les données des anciens tableaux\r\n      const newFreshState = [\r\n        [],\r\n        [],\r\n        [],\r\n      ]\r\n\r\n      let index = 0 \r\n      // creation de boucle dans une boucle pour inserer les données dans les sous tableaux\r\n      for(let i=0; i<3; i++){\r\n        for(let j=0; j<10; j++){\r\n          newFreshState[i].push(imgsReceived[index])\r\n          index++\r\n        }\r\n      }\r\n\r\n      // mise a jour de letat avec les nouveux tableaux\r\n      setDataImg(newFreshState)\r\n    })\r\n  }\r\n\r\n  const inpRef = useRef()\r\n\r\n\r\n  // SCROLLHEIGHT mesure de la hauteur du contenu d'un élément, y compris le contenu non visible à l'écran\r\n  // CLIENTHEIGHT : hauteur intérieure d'un élément en pixels\r\n  // Element.scrollTop : obtient ou définit le nombre de pixels de défilement vertical du contenu d'un élément.\r\n\r\n  // scroll infini : mesurer si lutilisateur est arrivé au bout de la page\r\n  const infiniteCheck =()=>{\r\n    console.log(\"hello infinitecheck\")\r\n    const {scrollTop, scrollHeight, clientHeight} = document.documentElement\r\n\r\n    if(Math.abs(scrollHeight - clientHeight - scrollTop) < 1) {\r\n      console.log(\"tu as touché le fond!\")\r\n      setPageIndex(pageIndex => pageIndex+1)\r\n    }\r\n  } \r\n\r\n  // OU if(scrollHeight - scrollTop === clientHeight){...}\r\n  \r\n\r\n  useEffect(()=>{\r\n    // ecouter levenement au scroll de la page : declencher la fonction infinteCheck\r\n    window.addEventListener(\"scroll\", infiniteCheck)\r\n    \r\n    // demontage du composant\r\n    return ()=>{\r\n      window.removeEventListener(\"scroll\",infiniteCheck)\r\n    }\r\n  },[])\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\r\n      <form onSubmit={handleSearch}>\r\n        <label htmlFor=\"search\">Votre recherche</label>\r\n        <input type=\"text\" id=\"search\"  ref={inpRef}/>\r\n      </form>\r\n\r\n      <div className=\"card-list\">\r\n        <div>\r\n          {dataImg[0].map(img=>{\r\n            return <img key={uuidv4()} src={img} alt=\"\"/>\r\n          })}\r\n        </div>\r\n\r\n        <div>\r\n          {dataImg[1].map(img=>{\r\n            return <img key={uuidv4()} src={img} alt=\"\"/>\r\n          })}\r\n        </div>\r\n\r\n        <div>\r\n          {dataImg[2].map(img=>{\r\n            return <img key={uuidv4()} src={img} alt=\"\"/>\r\n          })}\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import InfiniteScroll from \"./Components/InfiniteScroll/InfiniteScroll\";\n\n\nfunction App() {\n  return (\n    <div>\n      <InfiniteScroll/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}